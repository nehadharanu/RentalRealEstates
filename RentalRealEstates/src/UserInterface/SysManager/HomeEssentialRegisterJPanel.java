/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.SysManager;

/**
 *
 * @author rajesh
 */
import Business.EcoSystem;
import Business.HomeEssentials.HomeEssentials;
import Business.HomeEssentials.HomeEssentialsDirectory;
import Utility.MapCoordinates;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class HomeEssentialRegisterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HomeEssentialRegisterJPanel
     */
    EcoSystem system;
    JPanel rightSidePanel;
    MapCoordinates locationPoint;

    public HomeEssentialRegisterJPanel(EcoSystem system, JPanel rightSidePanel, MapCoordinates locationPoint) {
        initComponents();
        this.system = system;
        this.rightSidePanel = rightSidePanel;
        this.locationPoint = locationPoint;
        this.setSize(1160, 750);
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        homeessentialsTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        userIdTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        phoneNoTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        locationInputField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(250, 249, 251));
        setPreferredSize(new java.awt.Dimension(1160, 750));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 24)); // NOI18N
        jLabel1.setText("Dashboard");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 31, -1, -1));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeessentialsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "User ID", "Password", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        homeessentialsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeessentialsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(homeessentialsTable);

        jPanel6.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 520));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, 520));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addButton.setBackground(new java.awt.Color(51, 51, 255));
        addButton.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add");
        addButton.setBorder(null);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel7.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 110, 30));

        updateButton.setBackground(new java.awt.Color(51, 51, 255));
        updateButton.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.setBorder(null);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel7.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 470, 110, 30));

        deleteButton.setBackground(new java.awt.Color(255, 55, 95));
        deleteButton.setFont(new java.awt.Font("SF Pro Text", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");
        deleteButton.setBorder(null);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel7.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 470, 90, 30));

        jLabel2.setFont(new java.awt.Font("SF Pro Display", 1, 24)); // NOI18N
        jLabel2.setText("Enter Details");
        jPanel7.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 300, 50));

        jLabel7.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(73, 84, 90));
        jLabel7.setText("Name");
        jPanel7.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 160, -1));

        nameTextField.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jPanel7.add(nameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 290, 30));

        userIdTextField.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jPanel7.add(userIdTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 290, 30));

        jLabel9.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(73, 84, 90));
        jLabel9.setText("User ID");
        jPanel7.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 170, -1));

        passwordTextField.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jPanel7.add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 290, 30));

        jLabel10.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(73, 84, 90));
        jLabel10.setText("Password");
        jPanel7.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 180, -1));

        jLabel11.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(73, 84, 90));
        jLabel11.setText("Phone Number");
        jPanel7.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 170, -1));

        phoneNoTextField.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jPanel7.add(phoneNoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 290, 30));

        jLabel8.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(73, 84, 90));
        jLabel8.setText("Location");
        jPanel7.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 160, -1));

        locationInputField.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        locationInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationInputFieldActionPerformed(evt);
            }
        });
        jPanel7.add(locationInputField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 290, 30));

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 90, 360, 520));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 790));
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:

        if (isValidated()) {
            String name = (nameTextField.getText());
            String location = (locationInputField.getText());
            String pwd = (passwordTextField.getText());
            String userId = (userIdTextField.getText());
            String phoneNum = (phoneNoTextField.getText());

            if (!system.getUserAccDirectory().checkIfUsernameIsUnique(userId)) {
                JOptionPane.showMessageDialog(this, "User name already exists");
                userIdTextField.setText("");
                return;
            }

            HomeEssentials he = new HomeEssentials(name, location, userId, pwd, Long.valueOf(phoneNum));
            system.getUserAccDirectory().addAccount(he);
            system.getHomeEssentialsDirectory().addHomeEssentials(he);

            displayTable();
            clearFields();
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if (isValidated()) {
            String username = userIdTextField.getText();
            DefaultTableModel table = (DefaultTableModel) homeessentialsTable.getModel();
            int sRow = homeessentialsTable.getSelectedRow();
            if (sRow >= 0) {

                String value = (String) homeessentialsTable.getValueAt(sRow, 2);
                HomeEssentialsDirectory directory = system.getHomeEssentialsDirectory();
                List<HomeEssentials> list = directory.getHomeEssentials();
                int listsize = list.size();

                if (!username.matches(value)) {
                    JOptionPane.showMessageDialog(null, "Cannot Update User ID , it is unique!!");
                    clearFields();
                    return;
                }

                for (int i = 0; i < listsize; i++) {
                    HomeEssentials homeEssentials = list.get(i);

                    if (homeEssentials.getUserId().matches(username)) {
                       
                        homeEssentials.setStoreName(nameTextField.getText());
                        homeEssentials.setStoreLocation(locationInputField.getText());
                        homeEssentials.setPhoneNo(Long.valueOf(phoneNoTextField.getText()));
                        homeEssentials.setUserId(userIdTextField.getText());
                        homeEssentials.setPassword(passwordTextField.getText());
                        break;
                    }
                }
                displayTable();
                clearFields();

            } else {
                JOptionPane.showMessageDialog(null, "Please select a row to update");
            }
        }

    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String username = userIdTextField.getText();
        DefaultTableModel table = (DefaultTableModel) homeessentialsTable.getModel();
        int sRow = homeessentialsTable.getSelectedRow();
        if (sRow >= 0) {

            HomeEssentialsDirectory homeEssentialsDirectory = system.getHomeEssentialsDirectory();
            List<HomeEssentials> list = homeEssentialsDirectory.getHomeEssentials();
            int z = list.size();
            for (int i = 0; i < z; i++) {
                HomeEssentials mp = list.get(i);
                if (mp.getUserId().matches(username)) {
                    homeEssentialsDirectory.removeHomeEssentials(mp);
                    system.getUserAccDirectory().removeccount(mp);
                    break;
                }
            }
            displayTable();
            clearFields();

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete");
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void homeessentialsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeessentialsTableMouseClicked
        // TODO add your handling code here:

        DefaultTableModel table = (DefaultTableModel) homeessentialsTable.getModel();
        int selectedRow = homeessentialsTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Home Essentials from table", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            nameTextField.setText(table.getValueAt(selectedRow, 0).toString());
            locationInputField.setText(table.getValueAt(selectedRow, 1).toString());
            userIdTextField.setText(table.getValueAt(selectedRow, 2).toString());
            passwordTextField.setText(table.getValueAt(selectedRow, 3).toString());
            phoneNoTextField.setText(table.getValueAt(selectedRow, 4).toString());

        }
    }//GEN-LAST:event_homeessentialsTableMouseClicked

    private void locationInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationInputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationInputFieldActionPerformed

    public void populateLongituteLatitude(MapCoordinates locationPoint) {
        this.locationPoint = locationPoint;
        locationInputField.setText(locationPoint.getLatitudeCoordinate() + ", " + locationPoint.getLongitudeCoordinate());
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable homeessentialsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField locationInputField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JTextField phoneNoTextField;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField userIdTextField;
    // End of variables declaration//GEN-END:variables

    private void displayTable() {

        HomeEssentialsDirectory homeEssDir = system.getHomeEssentialsDirectory();
        DefaultTableModel model = (DefaultTableModel) homeessentialsTable.getModel();

        model.setRowCount(0);
        for (HomeEssentials homeEssentials : homeEssDir.getHomeEssentials()) {
            Object[] row = new Object[6];
            row[0] = homeEssentials.getStoreName();
            row[1] = homeEssentials.getStoreLocation();
            row[2] = homeEssentials.getUserId();
            row[3] = homeEssentials.getPassword();
            row[4] = homeEssentials.getPhoneNo();

            model.addRow(row);
        }
    }

    private void clearFields() {
        locationInputField.setText("");
        nameTextField.setText("");
        userIdTextField.setText("");
        passwordTextField.setText("");
        phoneNoTextField.setText("");
    }

    private boolean isValidated() {
        if (null == nameTextField.getText() || nameTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "please enter name");
            return false;
        }
        if (null == locationInputField.getText() || locationInputField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "please select a location");
            return false;
        }
        if (null == userIdTextField.getText() || userIdTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "please enter User ID");
            return false;
        }
        if (null == passwordTextField.getText() || passwordTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "please enter password");
            return false;
        }
        if (null == phoneNoTextField.getText() || phoneNoTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "please enter phone number");
            return false;
        }
        if (!phoneNoTextField.getText().matches("[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]")) {
            JOptionPane.showMessageDialog(this, " 10 digit phone number");
            phoneNoTextField.setText("");
            return false;
        }

        if (!passwordTextField.getText().matches("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$")) {
            JOptionPane.showMessageDialog(this, "Password is in incorrect Format.\nShould be minimum 8 in length "
                    + "with one upper case, one lower case, one digit and one special character");
            passwordTextField.setText("");
            return false;
        }
        return true;
    }
}
