/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Builder;

import Business.Builder.Builder;
import Business.Builder.Listings;
import Business.EcoSystem;
import Business.Enums.ListingsState;
import Business.UserAccountManagement.UserAccount;
import Business.WorkQueue.ListingRequest;
import Business.WorkQueue.ListingRequestDirectory;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Neha D
 */
public class BuilderRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PharmaOrder
     */
    private UserAccount userAcc;
    private EcoSystem system;
    private JPanel container;

    public BuilderRequestsJPanel(EcoSystem system, JPanel userProcessContainer, UserAccount userAcc) {
        initComponents();
        this.system = system;
        this.container = userProcessContainer;
        this.userAcc = userAcc;
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestsTable = new javax.swing.JTable();
        updateStatus = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listingTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(250, 249, 251));
        setPreferredSize(new java.awt.Dimension(1160, 750));

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(1920, 1080));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        requestsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tenant Name", "Agent name", "Order Status"
            }
        ));
        requestsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                requestsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(requestsTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 949, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 960, 310));

        updateStatus.setBackground(new java.awt.Color(51, 51, 255));
        updateStatus.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        updateStatus.setForeground(new java.awt.Color(255, 255, 255));
        updateStatus.setText("Update status");
        updateStatus.setBorder(null);
        updateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStatusActionPerformed(evt);
            }
        });
        jPanel1.add(updateStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 620, 200, 39));

        resetButton.setBackground(new java.awt.Color(255, 55, 95));
        resetButton.setFont(new java.awt.Font("SF Pro Text", 1, 14)); // NOI18N
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setText("Reset");
        resetButton.setBorder(null);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 620, 180, 39));

        listingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "AptNo", "Address", "Beds", "Baths", "Rent"
            }
        ));
        listingTable.setEnabled(false);
        listingTable.setFocusable(false);
        listingTable.setRowSelectionAllowed(false);
        jScrollPane4.setViewportView(listingTable);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 950, 130));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1160, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStatusActionPerformed
        // TODO add your handling code here:
        updateStatus();
    }//GEN-LAST:event_updateStatusActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        resetOrder();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void requestsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestsTableMouseClicked
        // TODO add your handling code here:

        displayRequest();
    }//GEN-LAST:event_requestsTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable listingTable;
    private javax.swing.JTable requestsTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton updateStatus;
    // End of variables declaration//GEN-END:variables

    private void displayTable() {

        ListingRequestDirectory directory = system.getListingRequestDirectory();
        List<ListingRequest> listingRequests = directory.getListingRequirement();

        int l = listingRequests.size();
        Builder builder = (Builder) userAcc;
        for (int i = 0; i < l; i++) {
            ListingRequest request = listingRequests.get(i);
            if (builder.getBuilderName().matches(request.getBuilderName())) {
                DefaultTableModel table = (DefaultTableModel) requestsTable.getModel();
                table.setRowCount(0);
                int r1 = request.getId();

                Object r2[] = {r1, request.getTenantId(), request.getRealEstateAgentName(), request.getStatus()};
                table.addRow(r2);
            }
        }

    }

    private void updateStatus() {

        DefaultTableModel table = (DefaultTableModel) requestsTable.getModel();
        int selectedRow = requestsTable.getSelectedRow();
        if (selectedRow >= 0) {
            int sRow = (int) table.getValueAt(selectedRow, 0);

            ListingRequestDirectory directory = system.getListingRequestDirectory();
            List<ListingRequest> requests = directory.getListingRequirement();

            int l = requests.size();

            for (int i = 0; i < l; i++) {
                ListingRequest listingReq = requests.get(i);
                if (sRow == listingReq.getId()) {
                    if (listingReq.getStatus() == ListingsState.ALLOCATED) {
                        listingReq.setStatus(ListingsState.OCCUPANCY_READY);
                    } else {
                        JOptionPane.showMessageDialog(this, "Wrong move!");

                    }
                }
            }
//            listingsTable.setModel(new DefaultTableModel(null, new String[]{"ID", "Patient Name", "Doctor Name", "Status"}));
            displayTable();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row!!");
        }

    }

    private void displayRequest() {

        DefaultTableModel table = (DefaultTableModel) requestsTable.getModel();
        int selectedRow = requestsTable.getSelectedRow();
        int sRow = (int) table.getValueAt(selectedRow, 0);

        ListingRequestDirectory directory = system.getListingRequestDirectory();
        List<ListingRequest> listings = directory.getListingRequirement();

        int listSize = listings.size();
        for (int i = 0; i < listSize; i++) {
            ListingRequest listingRequest = listings.get(i);
            if (sRow == listingRequest.getId()) {
                displayListingTable(listingRequest.getListings());
            }
        }

    }

    private void resetOrder() {
        DefaultTableModel table = (DefaultTableModel) requestsTable.getModel();
        int selectedRow = requestsTable.getSelectedRow();
        if (selectedRow >= 0) {
            int sRow = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());

            ListingRequestDirectory directory = system.getListingRequestDirectory();
            List<ListingRequest> listings = directory.getListingRequirement();

            int listSize = listings.size();
            for (int i = 0; i < listSize; i++) {
                ListingRequest listingRequest = listings.get(i);
                if (sRow == listingRequest.getId()) {
                    if (listingRequest.getStatus() == ListingsState.OCCUPANCY_READY) {
                        listingRequest.setStatus(ListingsState.ALLOCATED);
                    } else {
                        JOptionPane.showMessageDialog(this, "Wrong move!");
                    }
                }
            }

//            requestsTable.setModel(new DefaultTableModel(null, new String[]{"ID", "Patient Name", "Doctor Name", "Status"}));
            displayTable();
        } else {
            JOptionPane.showMessageDialog(this, "Select a Row!!");
        }

    }

    private void displayListingTable(Listings listing) {
        DefaultTableModel model = (DefaultTableModel) listingTable.getModel();
        model.setRowCount(0);

        Object row[] = {listing, listing.getAddress(), listing.getNumberOfBeds(), listing.getNumberOfBaths(), listing.getRent()};
        model.addRow(row);
    }
}
