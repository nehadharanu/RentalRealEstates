/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RealEstateAgent;

import Business.RealEstateAgency.RealEstateAgent;
import Business.EcoSystem;
import Business.Enums.AppointmentState;
import Business.UserAccountManagement.UserAccount;
import Business.Utils.DateFormatter;
import Business.WorkQueue.RealEstateAgentAppointment;
import Business.WorkQueue.RealEstateAgentAppointmentDirectory;
import Business.WorkQueue.SearchApplication;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author preranagireesh
 */
public class ManageAppointment extends javax.swing.JPanel {

    /**
     * Creates new form ManageDoc
     */
    private UserAccount userAcc;
    private EcoSystem system;
    private JPanel container;

    public ManageAppointment(JPanel userProcessContainer, EcoSystem ecosystem, UserAccount userAcc) {
        initComponents();
        this.system = ecosystem;
        this.container = userProcessContainer;
        this.userAcc = userAcc;
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        consult = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        prescribe = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(250, 249, 251));
        setPreferredSize(new java.awt.Dimension(1160, 750));

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(1160, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Status", "Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 1020, -1));

        consult.setBackground(new java.awt.Color(51, 51, 255));
        consult.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        consult.setForeground(new java.awt.Color(255, 255, 255));
        consult.setText("Consult");
        consult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultActionPerformed(evt);
            }
        });
        jPanel1.add(consult, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 580, 180, 50));

        cancel.setBackground(new java.awt.Color(255, 69, 58));
        cancel.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        cancel.setForeground(new java.awt.Color(255, 255, 255));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        jPanel1.add(cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 580, 180, 50));

        prescribe.setBackground(new java.awt.Color(51, 51, 255));
        prescribe.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        prescribe.setForeground(new java.awt.Color(255, 255, 255));
        prescribe.setText("Suggest Houses");
        prescribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prescribeActionPerformed(evt);
            }
        });
        jPanel1.add(prescribe, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 580, 180, 50));

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 24)); // NOI18N
        jLabel1.setText("Appointments");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void consultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultActionPerformed
        // TODO add your handling code here:
        consultation();

    }//GEN-LAST:event_consultActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        cancelAppoint();

    }//GEN-LAST:event_cancelActionPerformed

    private void prescribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prescribeActionPerformed
        // TODO add your handling code here:
        suggestHouses();
    }//GEN-LAST:event_prescribeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton consult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton prescribe;
    // End of variables declaration//GEN-END:variables

    private void displayTable() {
        
        RealEstateAgentAppointmentDirectory AgencyDir = system.getRealEstateAgentAppointmentDir();
        List<RealEstateAgentAppointment> dAppList = AgencyDir.getAppointments();
        int l = dAppList.size();
        for (int i = 0; i < l; i++) {
            RealEstateAgentAppointment RealEstateAgentApp = dAppList.get(i);
            RealEstateAgent realEstateAgent = (RealEstateAgent) userAcc;
            if (RealEstateAgentApp.getRealEstateAgentName().matches(realEstateAgent.getAgentName())) {

                DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
                int s1 = RealEstateAgentApp.getId();

                Object s2[] = {s1, RealEstateAgentApp.getUserName(), RealEstateAgentApp.getState(), DateFormatter.getDateString(RealEstateAgentApp.getDate()), RealEstateAgentApp.getTime()};
                table.addRow(s2);
            }
        }
    }

    private void consultation() {
        
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int sRow = (int) table.getValueAt(selectedRow, 0);
            RealEstateAgentAppointmentDirectory dAppList = system.getRealEstateAgentAppointmentDir();
            List<RealEstateAgentAppointment> appList = dAppList.getAppointments();
            int l = appList.size();

            for (int i = 0; i < l; i++) {
                RealEstateAgentAppointment realEstateAgentAppointment = appList.get(i);
                if (sRow == realEstateAgentAppointment.getId()/*&&o.getStatus().matches("Deliver Man Assigned")*/) {
                    if (realEstateAgentAppointment.getState() == AppointmentState.APPOINTMENT_SCHEDULED) {
                        realEstateAgentAppointment.setState(AppointmentState.CONSULTATION_COMPLETED);
                        JOptionPane.showMessageDialog(this, "Processed! Please make a note of Tenant's housing requirement");
                    } else {
                        JOptionPane.showMessageDialog(this, "Wrong move! Meeting done/cancelled");
                    }
                }
            }
            jTable1.setModel(new DefaultTableModel(null, new String[]{"ID", "Name", "Status", "Date", "Time"}));
            displayTable();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row!!");
        }

    }

    private void cancelAppoint() {
        
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int sRow = (int) table.getValueAt(selectedRow, 0);
            RealEstateAgentAppointmentDirectory dApp = system.getRealEstateAgentAppointmentDir();
            List<RealEstateAgentAppointment> appList = dApp.getAppointments();

            int l = appList.size();

            for (int i = 0; i < l; i++) {
                RealEstateAgentAppointment realEstateAgentApplication = appList.get(i);
                if (sRow == realEstateAgentApplication.getId()/*&&o.getStatus().matches("Deliver Man Assigned")*/) {
                    if (realEstateAgentApplication.getState() == AppointmentState.APPOINTMENT_SCHEDULED) {
                        realEstateAgentApplication.setState(AppointmentState.CANCELLED);
                        removeRealEstateAgentBooking(realEstateAgentApplication.getRealEstateAgentName(), realEstateAgentApplication.getDate(), realEstateAgentApplication.getTime());
                        JOptionPane.showMessageDialog(this, "Appointment Cancelled");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid request! Please contact the system admin.");

                    }
                }
            }
            jTable1.setModel(new DefaultTableModel(null, new String[]{"ID", "Name", "Status", "Date", "Time"}));
            displayTable();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!!");
        }

    }

    private void removeRealEstateAgentBooking(String name, Date date, String time) {
        
        SearchApplication check = system.getCheckApplication();
        Map<String, List<String>> appList = check.getSearchByName();
        for (Map.Entry mapElement : appList.entrySet()) {
            if (mapElement.getKey().toString().matches(name)) {
                List<String> docList = (List) mapElement.getValue();
                String appDate = docList.get(0);
                String appTime = docList.get(1);
                if (appDate.matches(DateFormatter.getDateString(date))) {
                    if (appTime.matches(time)) {
                        appList.remove(name);
                    }
                }
            }
        }

    }

    private void suggestHouses() {
        
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int sRow = (int) table.getValueAt(selectedRow, 0);

            RealEstateAgentAppointmentDirectory realEstateAgentApplication = system.getRealEstateAgentAppointmentDir();
            List<RealEstateAgentAppointment> realEstateAgentAppList = realEstateAgentApplication.getAppointments();

            int l = realEstateAgentAppList.size();

            for (int i = 0; i < l; i++) {
                RealEstateAgentAppointment docList = realEstateAgentAppList.get(i);
                if (sRow == docList.getId()/*&&o.getStatus().matches("Deliver Man Assigned")*/) {
                    if (docList.getState() == AppointmentState.CONSULTATION_COMPLETED) {

                  BuilderAgent builder = new BuilderAgent(container, system, userAcc, docList.getUserId(), sRow);

                        container.add(builder);
                        CardLayout layout = (CardLayout) container.getLayout();
                        layout.next(container);

                    } else if(docList.getState() == AppointmentState.APPOINTMENT_SCHEDULED) {
                        JOptionPane.showMessageDialog(this, "Please consult the Tenant first");
                    } 
                    else {
                        JOptionPane.showMessageDialog(this, "Wrong Move! Meeting Done/Cancelled");
                    }
                }
            }
            jTable1.setModel(new DefaultTableModel(null, new String[]{"ID", "Name", "Status", "Date", "Time"}));
            displayTable();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row!!");
        }

    }
}
