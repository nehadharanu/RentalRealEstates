/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface;

import Business.Builder.Builder;
import Business.Builder.BuilderDirectory;
import Business.RealEstateAgency.RealEstateAgent;
import Business.RealEstateAgency.RealEstateAgentDirectory;
import Business.EcoSystem;
import Business.HomeEssentials.HomeEssentials;
import Business.HomeEssentials.HomeEssentialsDirectory;
import Business.PointOfContact.Medical.Ambulance;
import Business.PointOfContact.Medical.AmbulanceDirectory;
import Business.PointOfContact.SecurityService.SecurityService;
import Business.PointOfContact.SecurityService.SecurityServiceDirectory;
import Business.PointOfContact.Utility.UtilityService;
import Business.PointOfContact.Utility.UtilityServiceDirectory;

import Business.Roles.HomeEssentialsRole;
import Business.Roles.MedicalEmergencyRole;
import Business.Roles.BuilderRole;
import Business.Roles.RealEstateAgentRole;
import Business.Roles.SecurityServiceRole;
import Business.Roles.UtilityServiceRole;
import Business.Roles.Roles;
import Business.Roles.SurveyorRole;
import Business.Roles.System_Manager;
import Business.Roles.UserRole;
import Business.Surveyor.Surveyor;
import Business.Surveyor.SurveyorDirectory;

import Business.User.User;
import Business.User.UserDirectory;
import Business.UserAccountManagement.UserAccount;
import UserInterface.Ambulance.AmbulanceView;
import UserInterface.Builder.BuilderEnterpriseJFrame;
import UserInterface.RealEstateAgent.RealEstateAgentJPanel;
import UserInterface.SecurityServiceJPanel.SecurityServiceJPanel;
import UserInterface.PropertyDevelopment.PropertyDevelopmentJPanel;
import UserInterface.UtilityService.UtilityServiceJPanel;
import UserInterface.HomeEssentials.HomeEssentialsJPanel;

import UserInterface.User.UserAreaJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author rajesh
 */
public class UserLogin extends javax.swing.JPanel {

    /**
     * Creates new form UserLogin
     */
    EcoSystem ecoSystem;
    JPanel workArea;
    UserAccount userAccount;
    JPanel JPanel;

    public UserLogin(JPanel workArea, EcoSystem ecoSystem) {
        initComponents();

        this.ecoSystem = ecoSystem;
        this.workArea = workArea;
        this.setSize(1920, 1080);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        signUpButton = new javax.swing.JButton();
        passwordTextField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1920, 1080));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("SF Pro Display", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("Welcome Back.");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 450, -1));

        jLabel4.setFont(new java.awt.Font("SF Pro Text", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(73, 84, 90));
        jLabel4.setText("Username");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 200, -1));

        userNameTextField.setBackground(new java.awt.Color(248, 248, 249));
        jPanel1.add(userNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 450, 48));

        jLabel5.setFont(new java.awt.Font("SF Pro Text", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(73, 84, 90));
        jLabel5.setText("Password");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 200, -1));

        loginButton.setBackground(new java.awt.Color(102, 102, 255));
        loginButton.setFont(new java.awt.Font("SF Pro Text", 1, 18)); // NOI18N
        loginButton.setForeground(new java.awt.Color(255, 255, 255));
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        jPanel1.add(loginButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 450, 50));

        jLabel6.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(73, 84, 90));
        jLabel6.setText("gain access to your account");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        jLabel7.setFont(new java.awt.Font("SF Pro Text", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(73, 84, 90));
        jLabel7.setText("Login with your data that you entered during your registration to ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        signUpButton.setFont(new java.awt.Font("SF Pro Text", 1, 18)); // NOI18N
        signUpButton.setForeground(new java.awt.Color(51, 51, 255));
        signUpButton.setText("Register");
        signUpButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 255), null));
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });
        jPanel1.add(signUpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, 450, 50));

        passwordTextField.setBackground(new java.awt.Color(248, 248, 249));
        jPanel1.add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 450, 50));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, 530, 520));

        jLabel1.setBackground(new java.awt.Color(102, 102, 255));
        jLabel1.setForeground(new java.awt.Color(153, 153, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/Login.jpg"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1670, 900));
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String userName = userNameTextField.getText();
        char[] userpasswordCharArray = passwordTextField.getPassword();
        String password = String.valueOf(userpasswordCharArray);

        userAccount = ecoSystem.getUserAccDirectory().authenticateUser(userName, password);

        // to check if the useraccount is null and display an error message
        if (userAccount == null) {
            JOptionPane.showMessageDialog(this, "Invalid credentials");
            return;
        } else {
            userNameTextField.setText("");
            passwordTextField.setText("");

            Roles userRole = userAccount.getRole();

            if (userRole instanceof System_Manager) {
                showSystemManagerWorkAreaJPanel(new System_Manager());
            } else if (userRole instanceof RealEstateAgentRole) {
                RealEstateAgentDirectory realEstateAgentDirectory = ecoSystem.getRealEstateAgentDirectory();
                List<RealEstateAgent> realEstateAgents = realEstateAgentDirectory.getRealEstateAgent();
                int count = 0;

                for (RealEstateAgent realEstateAgent : realEstateAgents) {
                    if (userAccount.getUsername().matches(realEstateAgent.getUsername())) {
                        viewAgentScreen();
                        count++;
                    }
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "Invalid credentials");
                }
            } else if (userRole instanceof UserRole) {
                UserDirectory userDirectory = ecoSystem.getUserDirectory();
                List<User> users = userDirectory.getUsers();

                for (User user : users) {
                    if (userAccount.getUsername().matches(user.getUsername())) {
                        viewUserScreen();
                    } else {
//                        JOptionPane.showMessageDialog(this, "Invalid credentials");
                    }
                }
            } else if (userRole instanceof BuilderRole) {
                BuilderDirectory builderDirectory = ecoSystem.getBuilderDirectory();
                List<Builder> builders = builderDirectory.getBuilders();
                boolean isValidBuilder = false;
                for (Builder builder : builders) {
                    if (userAccount.getUsername().matches(builder.getUsername())) {
                        isValidBuilder = true;
                        viewBuilderScreen();
                        break;
                    }
                }

                if (!isValidBuilder) {
                    JOptionPane.showMessageDialog(this, "Invalid credentials");
                }
            } else if (userRole instanceof HomeEssentialsRole) {
                HomeEssentialsDirectory directory = ecoSystem.getHomeEssentialsDirectory();
                List<HomeEssentials> marketPlaces = directory.getHomeEssentials();
                for (HomeEssentials marketPlace : marketPlaces) {
                    if (userAccount.getUsername().matches(marketPlace.getUsername())) {
                        viewHomeEssentialsScreen();
                    }
                }
            } else if (userRole instanceof SecurityServiceRole) {
                SecurityServiceDirectory directory = ecoSystem.getSecurityServiceDirectory();
                List<SecurityService> securityServices = directory.getSecurityServiceDirectory();
                for (SecurityService securityService : securityServices) {
                    if (userAccount.getUsername().matches(securityService.getUsername())) {
                        viewsecurityServicemanScreen();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid credentials");
                    }
                }
            } else if (userRole instanceof MedicalEmergencyRole) {
                AmbulanceDirectory directory = ecoSystem.getAmbulanceDirectory();
                List<Ambulance> ambulances = directory.getAmbulanceDirectory();
                for (Ambulance ambulance : ambulances) {
                    if (userAccount.getUsername().matches(ambulance.getUsername())) {
                        viewAmbulanceScreen();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid credentials");
                    }
                }
            } else if (userRole instanceof UtilityServiceRole) {
                UtilityServiceDirectory directory = ecoSystem.getUtilityServiceDirectory();
                List<UtilityService> maintenances = directory.getUtilityServiceList();
                for (UtilityService maintenance : maintenances) {
                    if (userAccount.getUsername().matches(maintenance.getUsername())) {
                        viewUtilityServiceScreen();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid credentials");
                    }
                }
            } else if (userRole instanceof SurveyorRole) {
                SurveyorDirectory directory = ecoSystem.getSurveyorDirectory();
                List<Surveyor> surveyors = directory.getSurveyorList();
                for (Surveyor surveyor : surveyors) {
                    if (userAccount.getUsername().matches(surveyor.getUsername())) {
                        viewSurveyorScreen();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid credentials");
                    }
                }
            }
        }

    }

    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_signUpButtonActionPerformed
        // TODO add your handling code here:
        UserRegister register = new UserRegister(workArea, ecoSystem);
        workArea.add("UserRegister", register);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton signUpButton;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
    private void showSystemManagerWorkAreaJPanel(System_Manager systemAdmin) {
        JPanel sysManagerWorkAreaJPanel = systemAdmin.createWorkArea(workArea, userAccount, ecoSystem);
        workArea.add("sysManagerWorkAreaJPanel", sysManagerWorkAreaJPanel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewAgentScreen() {
        RealEstateAgentJPanel agentViewJPanel = new RealEstateAgentJPanel(workArea, userAccount, ecoSystem);
        workArea.add(agentViewJPanel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewUserScreen() {
        UserAreaJPanel userAreaJPanel = new UserAreaJPanel(workArea, userAccount, ecoSystem);
        workArea.add(userAreaJPanel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewBuilderScreen() {
        BuilderEnterpriseJFrame frame = new BuilderEnterpriseJFrame(workArea, userAccount, ecoSystem);
        workArea.add(frame);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewHomeEssentialsScreen() {
        HomeEssentialsJPanel marketPlaceView = new HomeEssentialsJPanel(workArea, userAccount, ecoSystem);
        workArea.add(marketPlaceView);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewsecurityServicemanScreen() {//viewsecurityServicemanScreen
        SecurityServiceJPanel securityServiceJPanel = new SecurityServiceJPanel(workArea, userAccount, ecoSystem);
        workArea.add(securityServiceJPanel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewAmbulanceScreen() {
        AmbulanceView ambulanceView = new AmbulanceView(workArea, userAccount, ecoSystem);
        workArea.add(ambulanceView);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewUtilityServiceScreen() {
        UtilityServiceJPanel utilityServiceMain = new UtilityServiceJPanel(workArea, userAccount, ecoSystem);
        workArea.add(utilityServiceMain);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

    private void viewSurveyorScreen() {
        PropertyDevelopmentJPanel boardJPanel = new PropertyDevelopmentJPanel(workArea, userAccount, ecoSystem);
        workArea.add(boardJPanel);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea);
    }

}
